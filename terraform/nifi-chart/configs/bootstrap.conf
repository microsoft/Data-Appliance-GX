#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Java command to use when running NiFi
java=java

# Username to use when running NiFi. This value will be ignored on Windows.
run.as=

# Configure where NiFi's lib and conf directories live
lib.dir=./lib
conf.dir=./conf

# How long to wait after telling NiFi to shutdown before explicitly killing the Process
graceful.shutdown.seconds=20

# Disable JSR 199 so that we can use JSP's without running a JDK
java.arg.1=-Dorg.apache.jasper.compiler.disablejsr199=true

# JVM memory settings
java.arg.2=-Xms{{.Values.nifi.bootstrapConf.jvmMinMemory}}
java.arg.3=-Xmx{{.Values.nifi.bootstrapConf.jvmMaxMemory}}

# Enable Remote Debugging
#java.arg.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000

java.arg.4=-Djava.net.preferIPv4Stack=true

# allowRestrictedHeaders is required for Cluster/Node communications to work properly
java.arg.5=-Dsun.net.http.allowRestrictedHeaders=true
java.arg.6=-Djava.protocol.handler.pkgs=sun.net.www.protocol

# The G1GC is known to cause some problems in Java 8 and earlier, but the issues were addressed in Java 9. If using Java 8 or earlier,
# it is recommended that G1GC not be used, especially in conjunction with the Write Ahead Provenance Repository. However, if using a newer
# version of Java, it can result in better performance without significant "stop-the-world" delays.
#java.arg.13=-XX:+UseG1GC

#Set headless mode by default
java.arg.14=-Djava.awt.headless=true

# Master key in hexadecimal format for encrypted sensitive configuration values
nifi.bootstrap.sensitive.key=

# Sets the provider of SecureRandom to /dev/urandom to prevent blocking on VMs
java.arg.15=-Djava.security.egd=file:/dev/urandom

# Requires JAAS to use only the provided JAAS configuration to authenticate a Subject, without using any "fallback" methods (such as prompting for username/password)
# Please see https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/single-signon.html, section "EXCEPTIONS TO THE MODEL"
java.arg.16=-Djavax.security.auth.useSubjectCredsOnly=true

###
# Notification Services for notifying interested parties when NiFi is stopped, started, dies
###

# XML File that contains the definitions of the notification services
notification.services.file=./conf/bootstrap-notification-services.xml

# In the case that we are unable to send a notification for an event, how many times should we retry?
notification.max.attempts=5

# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is started?
#nifi.start.notification.services=email-notification

# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is stopped?
#nifi.stop.notification.services=email-notification

# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi dies?
#nifi.dead.notification.services=email-notification

java.arg.17=-XX:+UseStringDeduplication

# G1GC splits memory allocations into regions allocated to eden, tenured, and survivor memory
# When promotion occurs and memory has been fully allocated in survivor, we'll need to
# allocate a new region ( which is costly and can cause major GC and allocation pauses)
# as such we'll see large allocations in jstat. To help mitigate this we can set a reserve
# so that we can eliminate to-space allocations. The default is 10%
java.arg.18=-XX:G1ReservePercent={{.Values.nifi.bootstrapConf.g1ReservePercent}}

# increase the number of threads used for parallel gc. Start with half the number
# of available cores. Note this won't be fully utilized unless needed. Some suggest
# 5/8 the number of cores, but this is generally fluid. In evaluating Apache NiFi
# in our test cases STW took some time. As a result, increasing the number of threads
# will help.
java.arg.19=-XX:ParallelGCThreads={{.Values.nifi.bootstrapConf.parallelGcThreads}}

# sets the number of concurrent parallel marking threads. Some like to think of
# ParallelGCThreads as the number of stop the world collector threads. There
# are suggestions to set this to 1/4 the number of ParallelGCThreads, but
# on a 16 core system (1/2) has, anecdotally, decreased marking
# times. TODO would be to better evaluate the garbage collector to get
# a better understanding of the implications of increasing this or decreasing this.
java.arg.20=-XX:ConcGCThreads={{.Values.nifi.bootstrapConf.concGcThreads}}

# Trigger threshold where the marking threads ( ConcGCThreads) will begin working.
# under heavy loads the default of 45 puts more pressure on marking to complete.
# Increasing this in increments of five, independent of gc threads ( parallel or marking)
# improved peformance and the marking cycles because less was required before triggering those
# threads. This one requires a TODO for evaluation of different workloads. Thirty-Five is
# reasonable, but justification of this is mostly anecdotal as any charting of GC histograms
# can be workload dependent.
java.arg.21=-XX:InitiatingHeapOccupancyPercent={{.Values.nifi.bootstrapConf.initiatingHeapOccupancyPercent}}
